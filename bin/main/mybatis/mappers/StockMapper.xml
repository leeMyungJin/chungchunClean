<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.chungchunClean.Mappers.StockMapper">

<select id="getStockList" parameterType="hashMap" resultType="com.chungchunClean.vo.StockVo">
	select
		ctg_bas.l_categy_cd ,
		ctg_bas.l_categy_nm ,
		ctg_dtl.item_cd ,
		ctg_dtl.item_nm,
		ctg_dtl.qr_url,
		ctg_dtl.cost,
		ctg_dtl.quantity,
		case when ctg_dtl.quantity > 10 then 'O'
		     else 'X' end as status
	from
		web.category_bas ctg_bas
	left outer join WEB.category_dtl ctg_dtl on
		ctg_bas.l_categy_cd = ctg_dtl.l_categy_cd
	where
		1 = 1
	<if test="inq != null">
		<choose>
			<when test="con == 'all'">
			AND 
				<foreach collection="inq" item="item"
					index="index" open="(" close=")" separator="or">
					ctg_bas.l_categy_nm LIKE '%' || #{item} || '%'
					or
					ctg_dtl.item_nm LIKE '%' || #{item} || '%'
				</foreach>
			</when>
			<when test="con == 'category'">
			AND 
				<foreach collection="inq" item="item"
					index="index" open="(" close=")" separator="or">
					ctg_bas.l_categy_nm LIKE '%' || #{item} || '%'
				</foreach>
			</when>
			<when test="con == 'item'">
			AND 
				<foreach collection="inq" item="item"
					index="index" open="(" close=")" separator="or">
					ctg_dtl.item_nm LIKE '%' || #{item} || '%'
				</foreach>
			</when>
		</choose>
	</if>
	<if test="esn == 'true'">
		AND ctg_dtl.quantity <![CDATA[<=]]> 10
	</if>
	AND ctg_dtl.item_cd is not null
	ORDER BY l_categy_cd, item_cd
</select>

<select id="getCategoryList" resultType="StockVo">
	SELECT 
		ctg_bas.l_categy_cd ,
		ctg_bas.l_categy_nm ,
		to_char(coalesce(updt_dt, cret_dt),'yyyy-mm-dd HH24:MI:SS') as reg_date
	FROM web.category_bas ctg_bas
	ORDER BY l_categy_cd
</select>

<select id="checkCategory" parameterType="StockVo" resultType="Integer">
	SELECT count(l_categy_cd)
	FROM web.category_bas ctg_bas
	WHERE 1=1
	  AND l_categy_cd = #{lCategyCd}
</select>

<delete id="deleteCategory" parameterType="StockVo">
DELETE 
  FROM WEB.CATEGORY_BAS 
  WHERE 1=1
  AND l_categy_cd = #{lCategyCd} 
</delete>
<insert id="saveCategory" parameterType="StockVo">
INSERT INTO WEB.CATEGORY_BAS 
  (l_categy_cd, l_categy_nm, cret_dt, cret_id, updt_dt, updt_id)
  VALUES (#{lCategyCd} , #{lCategyNm}, now(), #{cretId}, now(), #{updtId})
ON CONFLICT( l_categy_cd) DO
UPDATE
	SET l_categy_cd = #{lCategyCd},
		l_categy_nm = #{lCategyNm},
		updt_dt		= now(),
		updt_id		= #{updtId}
</insert>
<select id="getLCategoryList" resultType="StockVo">
SELECT DISTINCT l_categy_cd, l_categy_nm
FROM WEB.CATEGORY_BAS
ORDER BY l_categy_cd
</select>
<select id="dupCheckItem" resultType="String" parameterType="StockVo">
SELECT
	item_cd
FROM
	WEB.CATEGORY_DTL
WHERE 1 = 1
AND l_categy_cd = #{lCategyCd}
AND item_cd = #{itemCd}
</select>

<insert id="addItem" parameterType="StockVo">
INSERT INTO WEB.CATEGORY_DTL
(l_categy_cd,  item_cd, item_nm, cost, cret_dt, cret_id, updt_dt ,updt_id, quantity, qr_url)
VALUES(#{lCategyCd}, #{itemCd}, #{itemNm}, #{cost}::numeric, now(), #{cretId}, now(), #{updtId},0, #{itemCd})	
</insert>

<delete id="deleteItem" parameterType="StockVo">
DELETE FROM WEB.CATEGORY_DTL
WHERE 1=1
AND l_categy_cd = #{lCategyCd}
AND item_cd = #{itemCd}
</delete>
<select id="getTotalItemCnt" resultType="String">
SELECT DISTINCT COUNT(ITEM_CD) AS ITEM_CD
FROM WEB.CATEGORY_DTL
</select>

<insert id="saveStock" parameterType="StockVo">
INSERT INTO WEB.CATEGORY_DTL 
  (l_categy_cd,   item_cd, item_nm, cost, cret_dt, cret_id, updt_dt, updt_id, qr_url)
  VALUES (#{lCategyCd},#{itemCd}, #{itemNm}, #{cost}::numeric, now(), #{cretId}, now(), #{updtId}, #{itemCd})
ON CONFLICT( l_categy_cd, item_cd) DO
UPDATE
	SET l_categy_cd = #{lCategyCd},
		item_cd 	= #{itemCd},
		item_nm		= #{itemNm},
		cost		=  #{cost}::numeric,
		updt_dt		= now(),
		updt_id		= #{updtId},
		qr_url 		= #{itemCd}
</insert>

<update id="saveQuantity" parameterType="StockVo">

UPDATE WEB.CATEGORY_DTL 
	SET quantity = #{quantity}
WHERE 1=1
  AND l_categy_cd  	= #{lCategyCd}
  AND item_cd		= #{itemCd}
</update>

<select id="getQuantityInfo" resultType="HashMap">
SELECT
	sum(quantity) as tot_quantity ,
	(
	select
		count(*)
	from
		web.category_dtl
	where
		quantity <![CDATA[<]]> 10 ) as add_warehousing,
	sum(cost*quantity) as tot_asset
FROM
	web.category_dtl
</select>


<!-- 재고관리 - 입출내역 화면 -->
<select id="getStockCurrentList" parameterType="hashMap" resultType="StockVo">
	select cate_sar_seq
			,l_categy_cd 
			, l_categy_nm 
			, item_cd 
			, item_nm 
			, "cost" 
			, quantity 
			, classifi_cd 
			, classifi_nm 
			, sar_quantity 
			, return_quantity 
			, to_char(cret_dt, 'YYYY-MM-DD') as cret_dt 
			, cret_id 
			, cret_nm
			, to_char(updt_dt, 'YYYY-MM-DD') as updt_dt 
			, updt_id 
	from web.category_dtl_sar								 
	where 1 = 1
	<if test="inq != null">
	AND 
		<choose>
			<when test="con == 'all'">
				<foreach collection="inq" item="item"
					index="index" open="(" close=")" separator="or">
					l_categy_nm LIKE '%' || #{item} || '%'
					or
					item_nm LIKE '%' || #{item} || '%'
					or
					cret_nm LIKE '%' || #{item} || '%'
				</foreach>
			</when>
			<when test="con == 'category'">
				<foreach collection="inq" item="item"
					index="index" open="(" close=")" separator="or">
					l_categy_nm LIKE '%' || #{item} || '%'
				</foreach>
			</when>
			<when test="con == 'product'">
				<foreach collection="inq" item="item"
					index="index" open="(" close=")" separator="or">
					item_nm LIKE '%' || #{item} || '%'
				</foreach>
			</when>
			<when test="con == 'person'">
				<foreach collection="inq" item="item"
					index="index" open="(" close=")" separator="or">
					cret_nm LIKE '%' || #{item} || '%'
				</foreach>
			</when>
		</choose>
	</if>
	<if test="fromDate != null and toDate != null">
		and cret_dt between #{fromDate}::timestamp and (to_date(#{toDate}, 'YYYY-MM-DD')+1)::timestamp
	</if>
	ORDER BY cate_sar_seq
</select>

<delete id="deleteStockCurrent" parameterType="StockVo">
	delete from web.category_dtl_sar 
	where cate_sar_seq = #{cateSarSeq}::integer
</delete>

<update id="deleteStockCurrentQuantity" parameterType="StockVo">
update web.category_dtl
set quantity = (select quantity 
				from web.category_dtl 
				where l_categy_cd = #{lCategyCd}
				and item_cd = #{itemCd} ) 
				<choose>
					<when test='classifiCd == "S"'>
						- #{sarQuantity}::numeric
					</when>
					<when test='classifiCd == "R"'>
						+ #{sarQuantity}::numeric
					</when>
					<when test="classifiCd == 'RS'">
						- #{returnQuantity}::numeric
					</when>
					<when test="classifiCd == 'RR'">
						+ #{returnQuantity}::numeric
					</when>
				</choose>
				
where l_categy_cd = #{lCategyCd}
and item_cd = #{itemCd}
</update>

<insert id="saveStockCurrent" parameterType="StockVo">
insert into web.category_dtl_sar (
		cate_sar_seq --시퀀스
		, l_categy_cd -- 대카테고리코드
		, l_categy_nm -- 대카테고리명
		, item_cd-- 물품코드
		, item_nm -- 물품명
		, "cost" -- 물품원가
		, quantity -- 물품재고
		, classifi_cd -- 분류코드
		, classifi_nm -- 분류명
		, sar_quantity -- 입출고수량
		, return_quantity -- 반품입출고수량
		, cret_dt -- 등록일자
		, cret_id -- 등록자
		, updt_dt -- 수정일자
		, updt_id -- 수정자
		, cret_nm -- 등록자명
)
values(
		(select max(cate_sar_seq)+1 from WEB.category_dtl_sar) -- 시퀀스
		, #{lCategyCd} -- 대카테고리코드
		, (select l_categy_nm from WEB.CATEGORY_BAS where l_categy_cd = #{lCategyCd}) -- 대카테고리명
		, #{itemCd}-- 물품코드
		, (select item_nm from WEB.CATEGORY_DTL where item_cd = #{itemCd}) -- 물품명
		, #{cost}::numeric -- 물품원가
		, (select quantity 
			from web.category_dtl 
			where l_categy_cd = #{lCategyCd}
			and item_cd = #{itemCd}) -- 물품재고
		, #{classifiCd} -- 분류코드
		, (select code_dtl_nm from WEB.code where code_cd = 'classifi' and code_dtl_cd = #{classifiCd})-- 분류명
		, replace(#{sarQuantity}, '', null)::numeric -- 입출고수량
		, replace(#{returnQuantity}, '', null)::numeric -- 반품입출고수량
		, NOW() -- 등록일자
		, #{cretId} -- 등록자
		, NOW() -- 수정일자
		, #{updtId} -- 수정자
		, #{cretId} -- 등록자명
)
</insert>

<update id="saveUpdateStockCurrent" parameterType="StockVo">
UPDATE web.category_dtl_sar
	SET quantity = (select quantity 
					from web.category_dtl 
					where l_categy_cd = #{lCategyCd}
					and item_cd = #{itemCd}) -- 물품재고
		, sar_quantity = replace(#{sarQuantity}, '', null)::numeric -- 입출고수량
		, return_quantity = replace(#{returnQuantity}, '', null)::numeric -- 반품입출고수량
		, updt_dt		= now()
		, updt_id		= #{updtId}
WHERE cate_sar_seq = #{cateSarSeq}::numeric
</update>

<update id="saveStockCurrentQuantity" parameterType="StockVo">
update web.category_dtl
set quantity = (select quantity 
				from web.category_dtl 
				where l_categy_cd = #{lCategyCd}
				and item_cd = #{itemCd} ) 
				<choose>
					<when test='classifiCd == "S"'>
						+ #{sarQuantity}::numeric
					</when>
					<when test='classifiCd == "R"'>
						- #{sarQuantity}::numeric
					</when>
					<when test="classifiCd == 'RS'">
						+ #{returnQuantity}::numeric
					</when>
					<when test="classifiCd == 'RR'">
						- #{returnQuantity}::numeric
					</when>
				</choose>
				
where l_categy_cd = #{lCategyCd}
and item_cd = #{itemCd}
</update>

<select id="getTodayStore" resultType="Integer">
	select COALESCE(sum(sar_quantity), 0)
	from web.category_dtl_sar 
	where to_char(cret_dt, 'YYYY-MM-DD') = to_char(NOW(), 'YYYY-MM-DD')
	and classifi_cd = 'S'
</select>
	
<select id="getTodayRelease" resultType="Integer">
	select COALESCE(sum(sar_quantity), 0)
	from web.category_dtl_sar 
	where to_char(cret_dt, 'YYYY-MM-DD') = to_char(NOW(), 'YYYY-MM-DD')
	and classifi_cd = 'R'
</select>	

<select id="getTodayReturnStore" resultType="Integer">
	select COALESCE(sum(return_quantity), 0)
	from web.category_dtl_sar 
	where to_char(cret_dt, 'YYYY-MM-DD') = to_char(NOW(), 'YYYY-MM-DD')
	and classifi_cd = 'RS'
</select>
	
<select id="getTodayReturnRelease" resultType="Integer">
	select COALESCE(sum(return_quantity), 0)
	from web.category_dtl_sar 
	where to_char(cret_dt, 'YYYY-MM-DD') = to_char(NOW(), 'YYYY-MM-DD')
	and classifi_cd = 'RR'
</select>	

<select id="getItemList" resultType="StockVo">
	select distinct l_categy_cd, item_cd, item_nm, COALESCE(quantity, 0) as quantity, cost
	from WEB.CATEGORY_dtl
	ORDER BY l_categy_cd, item_cd
</select>

<select id="getClassifiList" resultType="CodeVo">
	SELECT code_dtl_cd as cd, code_dtl_nm as nm
	FROM WEB.code
	where code_cd = 'classifi'
	ORDER BY code_dtl_nm
</select>

<select id="getStockQrList" parameterType="hashMap" resultType="CodeVo">
	select ctg_dtl.qr_url cd, ctg_dtl.item_nm nm
	from web.category_bas ctg_bas left outer join WEB.category_dtl ctg_dtl on ctg_bas.l_categy_cd = ctg_dtl.l_categy_cd
	where
		1 = 1
	<if test="inq != null">
		<choose>
			<when test="con == 'all'">
			AND 
				<foreach collection="inq" item="item"
					index="index" open="(" close=")" separator="or">
					ctg_bas.l_categy_nm LIKE '%' || #{item} || '%'
					or
					ctg_dtl.item_nm LIKE '%' || #{item} || '%'
				</foreach>
			</when>
			<when test="con == 'category'">
			AND 
				<foreach collection="inq" item="item"
					index="index" open="(" close=")" separator="or">
					ctg_bas.l_categy_nm LIKE '%' || #{item} || '%'
				</foreach>
			</when>
			<when test="con == 'item'">
			AND 
				<foreach collection="inq" item="item"
					index="index" open="(" close=")" separator="or">
					ctg_dtl.item_nm LIKE '%' || #{item} || '%'
				</foreach>
			</when>
		</choose>
	</if>
	<if test="esn == 'true'">
		AND ctg_dtl.quantity <![CDATA[<=]]> 10
	</if>
	AND ctg_dtl.item_cd is not null
		ORDER BY ctg_bas.l_categy_cd, ctg_dtl.item_cd
</select>


</mapper>