<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.chungchunClean.Mappers.ObjectMapper">

	<select id="getTotalStaff" resultType="Integer">
		select count(*) from web.staff where active_yn = 'Y'
	</select>
	
	<select id="getTotalAdmin" resultType="Integer">
		select count(*) from web.staff where admin_yn = 'Y'
	</select>	

	<select id="getStaffList" parameterType="hashMap" resultType="StaffVo">
		select staff_id
			   , staff_pass
			   , staff_name
			   , staff_pnum
			   , staff_email
			   , memo
			   , active_yn
			   , admin_yn
			   , to_char(cret_dt, 'YYYY-MM-DD') as cret_dt 
			   , cret_id
			   , to_char(updt_dt, 'YYYY-MM-DD') as updt_dt 
			   , updt_id
			   , to_char(lateass_dt, 'YYYY-MM-DD') as lateass_dt 
		from web.staff 
		where 1=1		
		<if test="inq != null">
			AND 
			<choose>
				<when test="con == 'name'">
					<foreach collection="inq" item="item"
						index="index" open="(" close=")" separator="or">
						staff_name LIKE '%' || #{item} || '%'
					</foreach>
				</when>
				<when test="con == 'id'">
					<foreach collection="inq" item="item"
						index="index" open="(" close=")" separator="or">
						staff_id LIKE '%' || #{item} || '%'
					</foreach>
				</when>
				<when test="con == 'mail'">
					<foreach collection="inq" item="item"
						index="index" open="(" close=")" separator="or">
						staff_email LIKE '%' || #{item} || '%'
					</foreach>
				</when>
				<otherwise>
					<foreach collection="inq" item="item"
						index="index" open="(" close=")" separator="or">
						staff_name LIKE '%' || #{item} || '%'
						or staff_id LIKE '%' || #{item} || '%'
						or staff_email LIKE '%' || #{item} || '%'
					</foreach>
				</otherwise>
			</choose>
		</if>
		order by cret_dt
	</select>	
	
	<select id="getStaffInfo" parameterType="StaffVo" resultType="StaffVo">
		select staff_id
			   , staff_pass
			   , staff_name
			   , staff_pnum
			   , staff_email
			   , memo
			   , active_yn
			   , admin_yn
			   , to_char(cret_dt, 'YYYY-MM-DD') as cret_dt 
			   , cret_id
			   , to_char(updt_dt, 'YYYY-MM-DD') as updt_dt 
			   , updt_id
			   , to_char(lateass_dt, 'YYYY-MM-DD') as lateass_dt 
		from web.staff 
		where 1=1		
		and staff_id = #{staffId}
	</select>	
	
	<select id="dupCheckId" parameterType="hashMap" resultType="String">
		select staff_id
		from web.staff
		where staff_id=#{id}
	</select>

	<insert id="saveNewStaff" parameterType="hashMap">
		INSERT INTO web.staff
			(staff_id
			   , staff_pass
			   , staff_name
			   , staff_pnum
			   , staff_email
			   , memo
			   , password_key
			   , cret_dt
			   , cret_id
			   , updt_dt
			   , updt_id
			)VALUES(
				#{staffId}
			   , #{staffPass}
			   , #{staffName}
			   , #{staffPnum}
			   , #{staffEmail}
			   , #{memo}
			   , #{passwordKey}
			   , NOW()
			   , #{cretId}
			   , NOW()
			   , #{cretId}
			)
	</insert>
	
	<delete id="deleteStaff" parameterType="hashMap">
		delete from web.staff
		where staff_id=#{id}
	</delete>
	
	<update id="updateStaff" parameterType="hashMap">
		UPDATE web.staff SET 
	   		<if test="password != null and password != ''">
	   	   		staff_pass=#{password},
			</if>
	       staff_name=#{name},
		   staff_pnum=#{telPhone}, 
		   staff_email=#{mail}, 
		   memo=#{memo}, 
		   active_yn=#{active}, 
		   admin_yn=#{admin}, 
		   updt_dt=NOW(),
		   updt_id='test'
		WHERE staff_id=#{id}
	</update>

	<select id="getBuildingList" parameterType="BldgVo" resultType="BldgVo">
	SELECT
		BAS.area_cd ,
		BAS.area_nm ,
		bas.bldg_cd ,
		BAS.bldg_nm ,
		BAS.client_nm ,
		BAS.con_cost ,
		BAS.dtl_addr ,
		BAS.zone,
		BAS.pnum ,
		BAS.surtax ,
		BAS.surtax_yn ,
		BAS.active_yn ,
		BAS.con_from_dt,
		BAS.con_to_dt,
		DTL.dong_num ,
		DTL.dong_qr_url ,
		BAS.memo ,
		TO_CHAR(BAS.cret_dt, 'YYYY-MM-DD') cret_dt
	FROM
		web.BLDG_BAS BAS
	LEFT OUTER JOIN web.BLDG_DTL DTL on BAS.bldg_cd = DTL.bldg_cd
	WHERE 1=1
	<if test="inq != null">
			AND 
			<choose>
				<when test="con == 'area'">
					<foreach collection="inq" item="item"
						index="index" open="(" close=")" separator="or">
						BAS.AREA_NM LIKE '%' || #{item} || '%'
					</foreach>
				</when>
				<when test="con == 'client'">
					<foreach collection="inq" item="item"
						index="index" open="(" close=")" separator="or">
						BAS.CLIENT_NM LIKE '%' || #{item} || '%'
					</foreach>
				</when>
				<when test="con == 'building'">
					<foreach collection="inq" item="item"
						index="index" open="(" close=")" separator="or">
						BAS.BLDG_NM LIKE '%' || #{item} || '%'
					</foreach>
				</when>
				<otherwise>
					<foreach collection="inq" item="item"
						index="index" open="(" close=")" separator="or">
						BAS.AREA_NM LIKE '%' || #{item} || '%'
						or BAS.CLIENT_NM LIKE '%' || #{item} || '%'
						or BAS.BLDG_NM LIKE '%' || #{item} || '%'
					</foreach>
				</otherwise>
			</choose>
		</if>
	order by BAS.CRET_DT
	</select>
	
	
	<select id="getBuildingQrList" parameterType="hashMap" resultType="CodeVo">
	select dtl.dong_qr_url cd, BAS.area_nm || '_' || bas.bldg_nm || '_' || dtl.dong_num as nm
	from web.BLDG_DTL DTL left join web.BLDG_BAS BAS on DTL.bldg_cd = BAS.bldg_cd
	where 1=1	
	<if test="inq != null">
			AND 
			<choose>
				<when test="con == 'area'">
					<foreach collection="inq" item="item"
						index="index" open="(" close=")" separator="or">
						BAS.AREA_NM LIKE '%' || #{item} || '%'
					</foreach>
				</when>
				<when test="con == 'client'">
					<foreach collection="inq" item="item"
						index="index" open="(" close=")" separator="or">
						BAS.CLIENT_NM LIKE '%' || #{item} || '%'
					</foreach>
				</when>
				<when test="con == 'building'">
					<foreach collection="inq" item="item"
						index="index" open="(" close=")" separator="or">
						BAS.BLDG_NM LIKE '%' || #{item} || '%'
					</foreach>
				</when>
				<otherwise>
					<foreach collection="inq" item="item"
						index="index" open="(" close=")" separator="or">
						BAS.AREA_NM LIKE '%' || #{item} || '%'
						or BAS.CLIENT_NM LIKE '%' || #{item} || '%'
						or BAS.BLDG_NM LIKE '%' || #{item} || '%'
					</foreach>
				</otherwise>
			</choose>
		</if>
	order by BAS.CRET_DT
	</select>

	<select id="dupCheckBuilding" parameterType="hashMap" resultType="Integer">
	select count(bldg_cd)
	  from WEB.bldg_bas bb 
	 where 1=1
	   and area_cd  = #{areaCd}
	   and zone = #{zone}
	   and dtl_addr  = #{dtlAddr}
	</select>

	<select id="getMaxBldgCd" resultType="String">
	 select bldg_cd
	   from web.bldg_bas
	  where 1=1
	  order by bldg_cd  desc
	  limit 1
	</select>

	<insert id="addBuildingBas" parameterType="hashMap">
	insert into web.bldg_Bas 
	(client_nm,area_cd, area_nm, bldg_Cd, bldg_nm,  dtl_addr, pnum, con_cost, con_from_dt, con_to_dt,  surtax_yn, surtax ,cret_dt, cret_id, updt_dt, updt_id, zone, memo, active_yn)
	values
	(#{clientNm}, #{areaCd}, #{areaNm}, #{bldgCd}, #{bldgNm}, #{dtlAddr}, #{pnum}, #{conCost}::numeric, #{conFromDt}, #{conToDt}, #{surtaxYn}, #{surtax}::numeric, now(), #{id}, now(), #{id}, #{zone}, #{memo}, #{activeYn})
	</insert>
	<insert id="addBuildingDetail" parameterType="hashMap">
	insert into web.bldg_dtl
	(bldg_cd, dong_num,  dong_qr_url, cret_dt, cret_id, updt_dt, updt_id, clean_cnt, from_dt, to_dt)
	values
	(#{bldgCd}, #{dongNum}, #{dongQrUrl}, now(), #{cretId}, now(), #{updtId}, #{cleanCnt}, #{fromDt}, #{toDt})
	</insert>

	<select id="getBldgInfo" resultType="hashMap">
	select
		(
			select
				count(*)
			from web.bldg_Bas
		) as bas_cnt ,
		(
			select
				count(*)
			from web.bldg_dtl 
		) as dtl_cnt
	</select>
	<select id="getBldgContInfo" parameterType="String" resultType = "BldgVo">
	select 
	    bldg_cd
	   ,bldg_nm
	   ,client_nm
	   ,con_from_dt  	
	   ,con_to_dt
	   ,con_cost
	   ,pnum
	   ,dtl_addr
	from web.bldg_bas
	where bldg_cd= #{bldgCd}
	</select>

	<select id="getDetailBuildingList" parameterType="hashMap" resultType="BldgVo">
	select
		bldg_cd,
		dong_num,
		clean_cnt,
		to_char(from_dt::date,'yyyy-mm-dd') from_dt,
		to_char(to_dt::date,'yyyy-mm-dd') to_dt,
		to_char(cret_dt, 'yyyy-mm-dd') cret_dt
	from web.bldg_dtl
	where bldg_cd=#{bldgCd}
	</select>

	<insert id="modifyBuilding" parameterType="hashMap">
	insert into web.bldg_Bas 
	(client_nm,area_cd, area_nm, bldg_Cd, bldg_nm,  dtl_addr, pnum, con_cost, con_from_dt, con_to_dt,  surtax_yn, surtax, cret_dt, cret_id, updt_dt, updt_id, zone, memo, active_yn)
	values
	(#{clientNm}, #{areaCd}, #{areaNm}, #{bldgCd}, #{bldgNm}, #{dtlAddr}, #{pnum}, #{conCost}::numeric, #{conFromDt}, #{conToDt}, #{surtaxYn}, #{surtax}::numeric, now(), #{id}, now(), #{id}, #{zone}, #{memo}, #{activeYn})
	ON CONFLICT(bldg_cd) DO
	UPDATE SET
	  client_nm = #{clientNm},
	  area_cd = #{areaCd},
	  area_nm = #{areaNm},
	  bldg_nm = #{bldgNm},
	  dtl_addr = #{dtlAddr},
	  pnum = #{pnum},
	  con_cost = #{conCost}::numeric,
	  con_from_dt = #{conFromDt},
	  con_to_dt = #{conToDt},
	  surtax_yn  =#{surtaxYn},
	  surtax = #{surtax}::numeric,
	  updt_dt = now(),
	  updt_id = #{id},
	  zone = #{zone},
	  memo = #{memo},
	  active_yn = #{activeYn}
	</insert>
	<insert id="modifyBuildingDetail" parameterType="BldgVo">
	insert into web.bldg_dtl
	(bldg_cd, dong_num,  dong_qr_url, cret_dt, cret_id, updt_dt, updt_id, clean_cnt, from_dt, to_dt)
	values
	(#{bldgCd}, #{dongNum}, #{dongQrUrl}, now(), #{cretId}, now(), #{updtId}, #{cleanCnt}, #{fromDt}, #{toDt})
	ON CONFLICT(bldg_cd, dong_num) DO 
	UPDATE SET 
	  updt_dt = now(),
	  updt_id = #{updtId},
	  clean_cnt = #{cleanCnt},
	  from_dt = #{fromDt},
	  to_dt = #{toDt}
	</insert>

	<delete id="deleteBuildingBas" parameterType="HashMap">
	delete from web.bldg_bas
	 where bldg_cd = #{bldgCd}
	</delete>

	<delete id="deleteBuildingDetail" parameterType="BldgVo">
	delete from web.bldg_dtl
	 where bldg_cd = #{bldgCd} and dong_num = #{dongNum}
	</delete>

	<delete id="deleteBuildingDetailAll" parameterType="BldgVo">
	delete from web.bldg_dtl
	 where bldg_cd = #{bldgCd}
	</delete>

	<insert id="excelUploadBuilding" parameterType="BldgVo">
	insert into web.bldg_Bas 
	(client_nm,area_cd, area_nm, bldg_Cd, bldg_nm,  dtl_addr, pnum, con_cost, con_from_dt, con_to_dt,  surtax_yn, surtax, cret_dt, cret_id, updt_dt, updt_id, zone, memo, active_yn)
	values
	(#{clientNm}, #{areaCd}, #{areaNm}, #{bldgCd}, #{bldgNm}, #{dtlAddr}, #{pnum}, #{conCost}::numeric, #{conFromDt}, #{conToDt}, #{surtaxYn}, #{surtax}::numeric, now(), #{cretId}, now(), #{updtId}, #{zone}, #{memo}, #{activeYn})
	ON CONFLICT(bldg_cd) DO
	UPDATE SET
	  client_nm = #{clientNm},
	  area_cd = #{areaCd},
	  area_nm = #{areaNm},
	  bldg_nm = #{bldgNm},
	  dtl_addr = #{dtlAddr},
	  pnum = #{pnum},
	  con_cost = #{conCost}::numeric,
	  con_from_dt = #{conFromDt},
	  con_to_dt = #{conToDt},
	  surtax_yn  =#{surtaxYn},
	  surtax = #{surtax}::numeric,
	  updt_dt = now(),
	  updt_id = #{updtId},
	  zone = #{zone},
	  memo = #{memo},
	  active_yn = #{activeYn}
	</insert>

	<update id="updateBuilding" parameterType="BldgVo">
	UPDATE web.BLDG_BAS
	SET
	  bldg_nm = #{bldgNm},
	  dtl_addr = #{dtlAddr},
	  pnum = #{pnum},
	  con_cost = #{conCost}::numeric,
	  updt_dt = now(),
	  updt_id = #{updtId},
	  memo = #{memo},
	  active_yn = #{activeYn}
	WHERE 1=1
	  AND bldg_cd = #{bldgCd}
	</update>
	
</mapper>