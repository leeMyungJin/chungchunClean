<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.chungchunClean.Mappers.CalculateMapper">

<select id="getMonList" parameterType="hashMap" resultType="CalculateVo">
	select bb.area_cd
		, bb.area_nm
		, bb.zone
		, bb.bldg_cd
		, bb.bldg_nm
		, bb.con_cost
		, bb.surtax
		, bb.surtax_yn 
		, amm.tax_bill
		, amm.add_cost  
		, coalesce(bb.con_cost, 0) + coalesce(bb.surtax, 0) + coalesce(amm.add_cost, 0) - coalesce(amm.deposit_cost, 0) as out_cost --계약금+부가세+추가금-입금 = 미수금
		, coalesce(oc.over_cost, 0)+ coalesce(bb.con_cost, 0) + coalesce(bb.surtax, 0) + coalesce(amm.add_cost, 0) - coalesce(amm.deposit_cost, 0) as over_cost		
		, oc.over_cost as over_cost_temp 
		, amm.deposit_cost 
		, to_char(amm.deposit_dt , 'YYYY-MM-DD') as deposit_dt 
		, amm.depositor 
		, bb.pnum 
		, amm.memo
		, coalesce(amm.mon_mt, #{date}) as mon_mt
	from web.bldg_bas bb left join (select * 
									from web.adjust_mt_manage 
									<if test="date != null">
										where mon_mt = #{date}
									</if>
									) amm on bb.bldg_cd = amm.bldg_cd
						 left join (select bldg_cd, mon_mt, over_cost 
									from web.adjust_mt_manage 
									where ( bldg_cd, mon_mt ) in (select bldg_cd, max(mon_mt)
																	from web.adjust_mt_manage 
																	<if test="date != null">
																		where mon_mt <![CDATA[ < ]]> #{date}
																	</if>
																	group by bldg_cd)
									) oc on bb.bldg_cd = oc.bldg_cd
	where bb.active_yn = 'Y'
	<if test="inq != null">
		<choose>
			<when test="con == 'all'">
			AND 
				<foreach collection="inq" item="item"
					index="index" open="(" close=")" separator="or">
					bb.area_nm LIKE '%' || #{item} || '%'
					or
					bb.bldg_nm LIKE '%' || #{item} || '%'
					or
					amm.depositor LIKE '%' || #{item} || '%'
				</foreach>
			</when>
			<when test="con == 'site'">
			AND 
				<foreach collection="inq" item="item"
					index="index" open="(" close=")" separator="or">
					bb.area_nm LIKE '%' || #{item} || '%'
				</foreach>
			</when>
			<when test="con == 'building'">
			AND 
				<foreach collection="inq" item="item"
					index="index" open="(" close=")" separator="or">
					bb.bldg_nm LIKE '%' || #{item} || '%'
				</foreach>
			</when>
			<when test="con == 'depositor'">
			AND 
				<foreach collection="inq" item="item"
					index="index" open="(" close=")" separator="or">
					amm.depositor LIKE '%' || #{item} || '%'
				</foreach>
			</when>
		</choose>
	</if>
	<if test="fromDate != null and toDate != null">
		and amm.cret_dt between #{fromDate}::timestamp and (to_date(#{toDate}, 'YYYY-MM-DD')+1)::timestamp
	</if>
	ORDER BY amm.mon_mt, bb.area_cd, bb.bldg_cd
</select>


<select id="getMonTotalCost" resultType="HashMap">
	select coalesce(sum(bb.con_cost), 0) + coalesce(sum(bb.surtax), 0) + coalesce(sum(amm.add_cost), 0) - coalesce(sum(amm.deposit_cost), 0) as outCost -- 금년 미수금
		,coalesce(sum(amm.deposit_cost), 0) as depositCost -- 금년 입금금액 (부가세포함)
      	,coalesce(sum(amm.add_cost), 0) as addCost --금년 추가금
	from web.adjust_mt_manage amm left join web.bldg_bas bb on amm.bldg_cd = bb.bldg_cd
	where 1=1
	and extract('YEAR' from deposit_dt) = extract('YEAR' from now())
</select>

<select id="getMonlableCost" parameterType="hashMap" resultType="HashMap">
	select coalesce(sum(bb.con_cost), 0) + coalesce(sum(bb.surtax), 0) + coalesce(sum(amm.add_cost), 0) - coalesce(sum(amm.deposit_cost), 0) as outCost -- 미수금
		,coalesce(sum(amm.deposit_cost), 0) as depositCost -- 금년 입금금액 (부가세포함)
      ,coalesce(sum(amm.add_cost), 0) as addCost --금년 추가금
	from web.bldg_bas bb left join (select * 
									from web.adjust_mt_manage 
									<if test="date != null">
										where mon_mt = #{date}
									</if>
									) amm on bb.bldg_cd = amm.bldg_cd
						 left join (select bldg_cd, mon_mt, over_cost 
									from web.adjust_mt_manage 
									where ( bldg_cd, mon_mt ) in (select bldg_cd, max(mon_mt)
																	from web.adjust_mt_manage 
																	<if test="date != null">
																		where mon_mt <![CDATA[ < ]]> #{date}
																	</if>
																	group by bldg_cd)
									) oc on bb.bldg_cd = oc.bldg_cd
	where bb.active_yn = 'Y'
		<if test="inq != null">
		<choose>
			<when test="con == 'all'">
			AND 
				<foreach collection="inq" item="item"
					index="index" open="(" close=")" separator="or">
					bb.area_nm LIKE '%' || #{item} || '%'
					or
					bb.bldg_nm LIKE '%' || #{item} || '%'
					or
					amm.depositor LIKE '%' || #{item} || '%'
				</foreach>
			</when>
			<when test="con == 'site'">
			AND 
				<foreach collection="inq" item="item"
					index="index" open="(" close=")" separator="or">
					bb.area_nm LIKE '%' || #{item} || '%'
				</foreach>
			</when>
			<when test="con == 'building'">
			AND 
				<foreach collection="inq" item="item"
					index="index" open="(" close=")" separator="or">
					bb.bldg_nm LIKE '%' || #{item} || '%'
				</foreach>
			</when>
			<when test="con == 'depositor'">
			AND 
				<foreach collection="inq" item="item"
					index="index" open="(" close=")" separator="or">
					amm.depositor LIKE '%' || #{item} || '%'
				</foreach>
			</when>
		</choose>
	</if>
	<if test="fromDate != null and toDate != null">
		and amm.cret_dt between #{fromDate}::timestamp and (to_date(#{toDate}, 'YYYY-MM-DD')+1)::timestamp
	</if>
</select>


<select id="getAddList" parameterType="hashMap" resultType="CalculateVo">
	select  add_seq
			, to_char(aa.add_dt , 'YYYY-MM-DD') as add_dt 
			, aa.classifi_cd 
			, aacb.classifi_nm
			, aa.item_cd
			, aacd.item_nm 
			, aa.area_nm
			, aa.bldg_nm 
			, aa.quote_cost 
			, aa.surtax
			, aa.mater_cost 
			, aa.outsc_cost 
			, aa.deposit_cost 
			, to_char(aa.deposit_dt , 'YYYY-MM-DD') as deposit_dt 
			, aa.depositor 
			, coalesce(aa.quote_cost, 0) + coalesce(aa.surtax, 0) - coalesce(aa.deposit_cost, 0) as out_cost
			, aa.cret_dt 
			, aa.cret_id 
			, aa.updt_dt 
			, aa.updt_id 
	from web.adjust_add aa left join web.adjust_add_cd_bas aacb on aa.classifi_cd = aacb.classifi_cd 
							left join web.adjust_add_cd_dtl aacd on aacb.classifi_cd = aacd.classifi_cd and aacd.item_cd = aa.item_cd 
	where
		1 = 1
	<if test="inq != null">
		<choose>
			<when test="con == 'all'">
			AND 
				<foreach collection="inq" item="item"
					index="index" open="(" close=")" separator="or">
					aa.area_nm LIKE '%' || #{item} || '%'
					or
					aa.bldg_nm LIKE '%' || #{item} || '%'
					or
					aa.depositor LIKE '%' || #{item} || '%'
				</foreach>
			</when>
			<when test="con == 'site'">
			AND 
				<foreach collection="inq" item="item"
					index="index" open="(" close=")" separator="or">
					aa.area_nm LIKE '%' || #{item} || '%'
				</foreach>
			</when>
			<when test="con == 'building'">
			AND 
				<foreach collection="inq" item="item"
					index="index" open="(" close=")" separator="or">
					aa.bldg_nm LIKE '%' || #{item} || '%'
				</foreach>
			</when>
			<when test="con == 'depositor'">
			AND 
				<foreach collection="inq" item="item"
					index="index" open="(" close=")" separator="or">
					aa.depositor LIKE '%' || #{item} || '%'
				</foreach>
			</when>
		</choose>
	</if>
	<if test="date != null">
		and to_char(aa.cret_dt, 'YYYY-MM') = #{date}
	</if>
	ORDER BY aa.add_dt, aa.classifi_cd, aa.item_cd
</select>

<select id="getAddTotalCost" resultType="HashMap">
select coalesce(sum(aa.quote_cost), 0) + coalesce(sum(aa.surtax), 0) as quoteCost --금년 견적
		, coalesce(sum(aa.quote_cost), 0) + coalesce(sum(aa.surtax), 0) - coalesce(sum(aa.deposit_cost), 0) as outCost --금년 누적미수금 
		, coalesce(sum(aa.deposit_cost), 0) as depositCost --금년 입금금액
from web.adjust_add aa
where extract('YEAR' from aa.deposit_dt) = extract('YEAR' from now())	
</select>

<select id="getAddlableCost" parameterType="hashMap" resultType="HashMap">
select coalesce(sum(aa.mater_cost), 0) as materCost --재료비
		, coalesce(sum(aa.outsc_cost), 0) as outscCost --외주비
		, coalesce(sum(aa.deposit_cost), 0) as depositCost  --입금
		, coalesce(sum(aa.quote_cost), 0) + coalesce(sum(aa.surtax), 0) as quoteCost -- 견적금
		, coalesce(sum(aa.quote_cost), 0) + coalesce(sum(aa.surtax), 0) - coalesce(sum(aa.deposit_cost), 0) as outCost  --미수금
from web.adjust_add aa
	where 1=1
	<if test="inq != null">
		<choose>
			<when test="con == 'all'">
			AND 
				<foreach collection="inq" item="item"
					index="index" open="(" close=")" separator="or">
					aa.area_nm LIKE '%' || #{item} || '%'
					or
					aa.bldg_nm LIKE '%' || #{item} || '%'
					or
					aa.depositor LIKE '%' || #{item} || '%'
				</foreach>
			</when>
			<when test="con == 'site'">
			AND 
				<foreach collection="inq" item="item"
					index="index" open="(" close=")" separator="or">
					aa.area_nm LIKE '%' || #{item} || '%'
				</foreach>
			</when>
			<when test="con == 'building'">
			AND 
				<foreach collection="inq" item="item"
					index="index" open="(" close=")" separator="or">
					aa.bldg_nm LIKE '%' || #{item} || '%'
				</foreach>
			</when>
			<when test="con == 'depositor'">
			AND 
				<foreach collection="inq" item="item"
					index="index" open="(" close=")" separator="or">
					aa.depositor LIKE '%' || #{item} || '%'
				</foreach>
			</when>
		</choose>
	</if>
	<if test="date != null">
		and to_char(aa.cret_dt, 'YYYY-MM') = #{date}
	</if>
</select>

<select id="getClassifiList"  parameterType="hashMap"  resultType="CalculateVo">
	select classifi_cd, classifi_nm, to_char(cret_dt, 'YYYY-MM-DD') as cret_dt 
	from web.adjust_add_cd_bas
	where 1=1
	<if test="type == 'list' or type == 'itemPop' or type == 'drop'">
		and active_yn = 'Y'
	</if>
	<if test="type == 'dupChk'">
		and active_yn = 'N'
	</if>
	order by classifi_cd
</select>

<select id="getItemList"  parameterType="hashMap"  resultType="CalculateVo">
	select classifi_cd, item_cd, item_nm, to_char(cret_dt, 'YYYY-MM-DD') as cret_dt 
	from web.adjust_add_cd_dtl
	where 1=1
	<if test="type == 'list' or type == 'drop'">
		and active_yn = 'Y'
	</if>
	<if test="type == 'dupChk'">
		and active_yn = 'N'
	</if>
	order by classifi_cd, item_cd
</select>

<select id="getBldgList"  parameterType="hashMap"  resultType="CalculateVo">
	select area_cd, area_nm, bldg_cd, bldg_nm , zone
	from web.bldg_bas
	where active_yn  = 'Y'
	order by bldg_cd
</select>


<delete id="deleteAdd" parameterType="CalculateVo">
DELETE FROM WEB.adjust_add
WHERE 1=1
AND add_seq = #{addSeq}::numeric
</delete>

<update id="deleteClassifi" parameterType="CalculateVo">
UPDATE WEB.adjust_add_cd_bas SET
	active_yn = 'N'
	, updt_dt		= now()
	, updt_id		= #{updtId}
WHERE classifi_cd = #{classifiCd};

UPDATE WEB.adjust_add_cd_dtl set
	active_yn = 'N'
	, updt_dt		= now()
	, updt_id		= #{updtId}
WHERE classifi_cd = #{classifiCd}
</update>

<update id="deleteItem" parameterType="CalculateVo">
UPDATE WEB.adjust_add_cd_dtl set
	active_yn = 'N'
	, updt_dt		= now()
	, updt_id		= #{updtId}
WHERE classifi_cd = #{classifiCd}
AND  item_cd = #{itemCd}
</update>


<insert id="saveMon" parameterType="CalculateVo">
INSERT INTO WEB.adjust_mt_manage 
(area_cd
  , area_nm 
  , bldg_cd 
  , bldg_nm 
  , mon_mt 
  , "zone" 
  , surtax 
  , tax_bill 
  , over_cost 
  , add_cost 
  , con_cost
  , deposit_cost 
  , deposit_dt 
  , depositor 
  , pnum 
  , memo 
  , cret_dt
  , cret_id
  , updt_dt
  , updt_id
)VALUES (#{areaCd}
	  , #{areaNm} 
	  , #{bldgCd}
	  , #{bldgNm} 
	  , #{monMt} 
	  , #{zone}
	  , #{surtax} 
	  , #{taxBill} 
	  , #{overCost} 
	  , #{addCost} 
	  , #{conCost}
	  , #{depositCost} 
	  , #{depositDt}::timestamp
	  , #{depositor} 
	  , #{pnum} 
	  , #{memo} 
		, now()
		, #{cretId}
		, now()
		, #{updtId}
)
ON CONFLICT(mon_mt , bldg_cd) DO
UPDATE
	SET tax_bill = #{taxBill},
		add_cost = #{addCost},
		over_cost = #{overCost},
		deposit_cost = #{depositCost},
		deposit_dt = #{depositDt}::timestamp,
		depositor = #{depositor},
		pnum = #{pnum},
		memo = #{memo},
		updt_dt		= now(),
		updt_id		= #{updtId}
</insert>

<insert id="saveAdd" parameterType="CalculateVo">
insert into web.adjust_add (
	add_seq
	,area_nm
	,bldg_nm
	,classifi_cd
	,classifi_nm
	,item_cd
	,item_nm
	,add_dt
	,quote_cost
	,surtax
	,mater_cost
	,outsc_cost
	,deposit_cost
	,deposit_dt
	,depositor
	,cret_dt
	,cret_id 
	,updt_dt
	,updt_id
)values(
	(select max(add_seq)+1 from WEB.adjust_add) -- 시퀀스
	,#{areaNm}
	,#{bldgNm}
	,#{classifiCd}
	,#{classifiNm}
	,#{itemCd}
	,#{itemNm}
	,NOW()
	,#{quoteCost}
	,#{surtax}
	,#{materCost}
	,#{outscCost}
	,#{depositCost}
	,#{depositDt}::timestamp
	,#{depositor}
	,NOW()
	,#{cretId}
	,NOW()
	,#{updtId}
)
</insert>

<update id="saveUpdateAdd" parameterType="CalculateVo">
update web.adjust_add set
	bldg_nm = #{bldgNm}
	, area_nm = #{areaNm}
	, classifi_cd = #{classifiCd}
	, classifi_nm = #{classifiNm}
	, item_cd = #{itemCd}
	, item_nm = #{itemNm}
	, quote_cost = #{quoteCost}
	, surtax = #{surtax}
	, mater_Cost = #{materCost}
	, outsc_cost = #{outscCost}
	, deposit_cost = #{depositCost}
	, deposit_dt = #{depositDt}::timestamp
	, depositor = #{depositor}
	, updt_dt = NOW()
	, updt_id = #{updtId}
where add_seq = #{addSeq}::numeric
</update>

<insert id="saveClassifi" parameterType="CalculateVo">
INSERT INTO WEB.adjust_add_cd_bas 
  (classifi_cd, classifi_nm, cret_dt, cret_id, updt_dt, updt_id)
  VALUES (#{classifiCd} , #{classifiNm}, now(), #{cretId}, now(), #{updtId})
ON CONFLICT( classifi_cd ) DO
UPDATE
	SET classifi_nm = #{classifiNm},
		updt_dt		= now(),
		updt_id		= #{updtId}
</insert>

<insert id="saveItem" parameterType="CalculateVo">
INSERT INTO WEB.adjust_add_cd_dtl 
  (classifi_cd, item_cd, item_nm, cret_dt, cret_id, updt_dt, updt_id)
  VALUES (#{classifiCd} , #{itemCd}, #{itemNm}, now(), #{cretId}, now(), #{updtId})
ON CONFLICT( classifi_cd, item_cd) DO
UPDATE
	SET item_nm = #{itemNm},
		updt_dt		= now(),
		updt_id		= #{updtId}

</insert>

<select id="getPopSpecification" parameterType="hashMap" resultType="CalculateVo">
select  (ROW_NUMBER() OVER()) AS rownum
	, to_char(NOW() , 'YYYY년 MM월 DD일') as cret_dt
	, aa.bldg_nm
	, aa.classifi_nm 
	, aa.item_nm 
	, aa.quote_cost as quote_cost
	, aa.surtax as surtax
	, coalesce(aa.quote_cost, 0)+coalesce(aa.surtax, 0) as con_cost 
	, aa2.quote_total_cost
	, aa2.surtax_total_cost
	, aa2.total_cost
from web.adjust_add aa left join (select bldg_nm
										, TO_CHAR(coalesce(sum(quote_cost), 0) , 'FM999,999,999,999,999') as quote_total_cost 
										, TO_CHAR(coalesce(sum(surtax), 0) , 'FM999,999,999,999,999') as surtax_total_cost 
										, TO_CHAR(coalesce(sum(quote_cost), 0)+coalesce(sum(surtax), 0) , 'FM999,999,999,999,999') as total_cost 
										from web.adjust_add 
										where to_char(cret_dt, 'YYYY-MM') = #{addMt}
										group by bldg_nm
									) aa2 on aa2.bldg_nm = aa.bldg_nm 
where aa.bldg_nm = #{bldgNm}
and to_char(aa.cret_dt, 'YYYY-MM') = #{addMt}
</select>

<insert id="saveMonExcel" parameterType="CalculateVo">
INSERT INTO WEB.adjust_mt_manage 
(area_cd
  , area_nm 
  , bldg_cd 
  , bldg_nm 
  , mon_mt 
  , "zone" 
  , surtax 
  , tax_bill 
  , over_cost 
  , add_cost 
  , con_cost
  , deposit_cost 
  , deposit_dt 
  , depositor 
  , pnum 
  , memo 
  , cret_dt
  , cret_id
  , updt_dt
  , updt_id
)
select bb.area_cd
	, bb.area_nm
	, bb.bldg_cd
	, bb.bldg_nm
	, #{monMt}
	, bb.zone
	, bb.surtax
	, #{taxBill}
	, coalesce(oc.over_cost, 0)+ coalesce(bb.con_cost, 0) + coalesce(bb.surtax, 0) + coalesce(#{addCost}, 0) - coalesce(#{depositCost}, 0) as over_cost
	, #{addCost} 
	, bb.con_cost
	, #{depositCost}
	, #{depositDt}::timestamp
	, #{depositor}
	, #{pnum}
	, #{memo}
	, now()
	, #{cretId}
	, now()
	, #{updtId}
from web.bldg_bas bb left join (select * 
								from web.adjust_mt_manage 
									where mon_mt = #{monMt}
								) amm on bb.bldg_cd = amm.bldg_cd
					 left join (select bldg_cd, mon_mt, over_cost 
								from web.adjust_mt_manage 
								where ( bldg_cd, mon_mt ) in (select bldg_cd, max(mon_mt)
																from web.adjust_mt_manage 
																	where mon_mt <![CDATA[ < ]]> #{monMt}
																group by bldg_cd)
								) oc on bb.bldg_cd = oc.bldg_cd
where bb.active_yn = 'Y'
and bb.area_cd = #{areaCd}
and bb.bldg_cd = #{bldgCd}
ON CONFLICT(mon_mt , bldg_cd) DO
UPDATE
	SET tax_bill = #{taxBill},
		add_cost = #{addCost},
		over_cost = (select coalesce(oc.over_cost, 0)+ coalesce(bb.con_cost, 0) + coalesce(bb.surtax, 0) + coalesce(#{addCost}, 0) - coalesce(#{depositCost}, 0)
					from web.bldg_bas bb left join (select * 
													from web.adjust_mt_manage 
														where mon_mt = #{monMt}
													) amm on bb.bldg_cd = amm.bldg_cd
										 left join (select bldg_cd, mon_mt, over_cost 
													from web.adjust_mt_manage 
													where ( bldg_cd, mon_mt ) in (select bldg_cd, max(mon_mt)
																					from web.adjust_mt_manage 
																						where mon_mt <![CDATA[ < ]]> #{monMt}
																					group by bldg_cd)
													) oc on bb.bldg_cd = oc.bldg_cd
					where bb.active_yn = 'Y'
					and bb.area_cd = #{areaCd}
					and bb.bldg_cd = #{bldgCd}
		),
		deposit_cost = #{depositCost},
		deposit_dt = #{depositDt}::timestamp,
		depositor = #{depositor},
		pnum = #{pnum},
		memo = #{memo},
		updt_dt		= now(),
		updt_id		= #{updtId}
</insert>

<insert id="saveAddExcel" parameterType="CalculateVo">
insert into web.adjust_add (
	add_seq
	,area_nm
	,bldg_nm
	,classifi_cd
	,classifi_nm
	,item_cd
	,item_nm
	,add_dt
	,quote_cost
	,surtax
	,mater_cost
	,outsc_cost
	,deposit_cost
	,deposit_dt
	,depositor
	,cret_dt
	,cret_id 
	,updt_dt
	,updt_id
)values(
	(select max(add_seq)+1 from WEB.adjust_add) -- 시퀀스
	,#{areaNm}
	,#{bldgNm}
	,#{classifiCd}
	,(select classifi_nm from web.adjust_add_cd_bas where classifi_cd = #{classifiCd})
	,#{itemCd}
	,(select item_nm from web.adjust_add_cd_dtl where classifi_cd = #{classifiCd} and item_cd = #{itemCd})
	,NOW()
	,#{quoteCost}
	,#{surtax}
	,#{materCost}
	,#{outscCost}
	,#{depositCost}
	,#{depositDt}::timestamp
	,#{depositor}
	,NOW()
	,#{cretId}
	,NOW()
	,#{updtId}
)
</insert>


	
</mapper>